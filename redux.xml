<templateSet group="redux">
  <template name="action" value="export const $ACTION$ = &quot;$ACTION$&quot;;&#10;&#10;export const $METHOD$ = ($PARAM$) =&gt; {&#10;  return {&#10;    type: $ACTION$,&#10;    payload: &#10;      $PARAM$&#10;  };&#10;};" description="Redux Action" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="METHOD" expression="underscoresToCamelCase(ACTION)" defaultValue="" alwaysStopAt="false" />
    <variable name="PARAM" expression="" defaultValue="&quot;param&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="reducer" value="const initialState = {$END$};&#10;&#10;export const $REDUCER$ = (state = initialState, action) =&gt; {&#10;  switch (action.type) {&#10;    case $ACTION_TYPE$:&#10;      return $PAYLOAD$;&#10;    default:&#10;      return state;&#10;  }&#10;};" description="Redux Reducer" toReformat="true" toShortenFQNames="true">
    <variable name="REDUCER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION_TYPE" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="PAYLOAD" expression="" defaultValue="action.payload" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="reducertest" value="test(&quot;$REDUCER_STRING$ reducer $ACTION_STRING$ action&quot;, () =&gt; {&#10;  let previousState = $PREVIOUS_STATE$;&#10;  let actionToTest = $ACTION$($PARAMS$);&#10;  let expectedState = $EXPECTED_STATE$;&#10;  expect($REDUCER$(previousState, actionToTest)).toEqual(expectedState);&#10;});" description="Redux Reducer test" toReformat="true" toShortenFQNames="true">
    <variable name="PREVIOUS_STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="EXPECTED_STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="REDUCER" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION_STRING" expression="camelCase(ACTION)" defaultValue="" alwaysStopAt="false" />
    <variable name="REDUCER_STRING" expression="camelCase(REDUCER)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="actiontest" value="test(&quot;action creator $METHOD_STRING$&quot;, () =&gt; {&#10;  let action = $METHOD$($PARAMS$);&#10;  expect(action).toEqual({&#10;    type: $ACTION$,&#10;    payload: $PARAMS$&#10;  });&#10;});" description="Redux Action Test" toReformat="true" toShortenFQNames="true">
    <variable name="METHOD" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION" expression="capitalizeAndUnderscore(METHOD)" defaultValue="" alwaysStopAt="false" />
    <variable name="METHOD_STRING" expression="camelCase(METHOD)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>